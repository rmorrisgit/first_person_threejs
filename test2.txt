import * as THREE from 'https://unpkg.com/three@0.136.0/build/three.module.js';

// === Basic Setup ===
const scene = new THREE.Scene();
scene.background = new THREE.Color(0x202020);

const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.set(0, 10, 10);
camera.lookAt(0, 0, 0);

const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// === Custom Cursor (CSS) ===
document.body.style.cursor = 'crosshair';

// === Capsule (Fake Character) ===
const material = new THREE.MeshStandardMaterial({ color: 0x00ff00 });
const capsuleGroup = new THREE.Group();

// Body
const body = new THREE.Mesh(
  new THREE.CylinderGeometry(0.5, 0.5, 1.0, 16),
  material
);
capsuleGroup.add(body);

// Top cap
const capTop = new THREE.Mesh(
  new THREE.SphereGeometry(0.5, 16, 16),
  material
);
capTop.position.y = 0.5;
capsuleGroup.add(capTop);

// Bottom cap
const capBottom = new THREE.Mesh(
  new THREE.SphereGeometry(0.5, 16, 16),
  material
);
capBottom.position.y = -0.5;
capsuleGroup.add(capBottom);

capsuleGroup.position.y = 1;
scene.add(capsuleGroup);

// === Ground ===
const groundGeometry = new THREE.PlaneGeometry(100, 100);
const groundMaterial = new THREE.MeshPhongMaterial({ color: 0x444444 });
const ground = new THREE.Mesh(groundGeometry, groundMaterial);
ground.rotation.x = -Math.PI / 2;
ground.receiveShadow = true;
scene.add(ground);

// === Lights ===
const ambientLight = new THREE.AmbientLight(0xffffff, 0.3);
scene.add(ambientLight);

const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
directionalLight.position.set(5, 10, 7.5);
scene.add(directionalLight);

// === Movement Variables ===
const moveSpeed = 5; // units per second
let moveTarget = null;
let isMouseDown = false;

// === Click Marker Variables ===
const clickMarkers = [];

// === Raycaster setup ===
const raycaster = new THREE.Raycaster();
const mouse = new THREE.Vector2();
const latestMouse = { x: 0, y: 0 };

// Update latest mouse position
window.addEventListener('mousemove', (event) => {
  latestMouse.x = event.clientX;
  latestMouse.y = event.clientY;
});

// Mouse press/release
window.addEventListener('mousedown', (event) => {
  isMouseDown = true;
  updateMoveTarget(event.clientX, event.clientY, true); // true = spawn marker
});

window.addEventListener('mouseup', () => {
  isMouseDown = false;
});

// Update move target function
function updateMoveTarget(clientX, clientY, spawnMarker = false) {
  mouse.x = (clientX / window.innerWidth) * 2 - 1;
  mouse.y = -(clientY / window.innerHeight) * 2 + 1;
  raycaster.setFromCamera(mouse, camera);

  const intersects = raycaster.intersectObject(ground);
  if (intersects.length > 0) {
    moveTarget = intersects[0].point.clone();
    moveTarget.y = capsuleGroup.position.y;

    // Spawn Click Marker only if spawnMarker is true
    if (spawnMarker) {
      const markerGeometry = new THREE.CircleGeometry(0.3, 16);
      const markerMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff, transparent: true, opacity: 0.8 });
      const marker = new THREE.Mesh(markerGeometry, markerMaterial);
      marker.rotation.x = -Math.PI / 2; // Face up
      marker.position.copy(intersects[0].point);
      marker.userData = { lifetime: 1.0 };
      scene.add(marker);
      clickMarkers.push(marker);
    }
  }
}

// === Animation Loop ===
const clock = new THREE.Clock();

function animate() {
  requestAnimationFrame(animate);

  const delta = clock.getDelta();

  // Update click markers (shrink and fade out)
  for (let i = clickMarkers.length - 1; i >= 0; i--) {
    const marker = clickMarkers[i];
    marker.userData.lifetime -= delta;

    marker.scale.multiplyScalar(0.98);
    marker.material.opacity *= 0.96;

    if (marker.userData.lifetime <= 0) {
      scene.remove(marker);
      clickMarkers.splice(i, 1);
    }
  }

  // Continuously update moveTarget while mouse held down
  if (isMouseDown) {
    updateMoveTarget(latestMouse.x, latestMouse.y);
  }

  if (moveTarget) {
    const direction = moveTarget.clone().sub(capsuleGroup.position);
    const distance = direction.length();

    if (distance > 0.1) {
      direction.normalize();
      capsuleGroup.position.add(direction.multiplyScalar(moveSpeed * delta));
      
      const targetRotation = Math.atan2(direction.x, direction.z);
      capsuleGroup.rotation.y = targetRotation;
    } else {
      moveTarget = null;
    }
  }

  renderer.render(scene, camera);
}

animate();

// === Window Resize Handling ===
window.addEventListener('resize', () => {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});
